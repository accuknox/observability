// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	FetchNetworkLogs(ctx context.Context, in *NetworkLogsRequest, opts ...grpc.CallOption) (Aggregator_FetchNetworkLogsClient, error)
	FetchSystemLogs(ctx context.Context, in *SystemLogsRequest, opts ...grpc.CallOption) (Aggregator_FetchSystemLogsClient, error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) FetchNetworkLogs(ctx context.Context, in *NetworkLogsRequest, opts ...grpc.CallOption) (Aggregator_FetchNetworkLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Aggregator_ServiceDesc.Streams[0], "/aggregator.Aggregator/FetchNetworkLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatorFetchNetworkLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Aggregator_FetchNetworkLogsClient interface {
	Recv() (*NetworkLogsResponse, error)
	grpc.ClientStream
}

type aggregatorFetchNetworkLogsClient struct {
	grpc.ClientStream
}

func (x *aggregatorFetchNetworkLogsClient) Recv() (*NetworkLogsResponse, error) {
	m := new(NetworkLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aggregatorClient) FetchSystemLogs(ctx context.Context, in *SystemLogsRequest, opts ...grpc.CallOption) (Aggregator_FetchSystemLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Aggregator_ServiceDesc.Streams[1], "/aggregator.Aggregator/FetchSystemLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatorFetchSystemLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Aggregator_FetchSystemLogsClient interface {
	Recv() (*SystemLogsResponse, error)
	grpc.ClientStream
}

type aggregatorFetchSystemLogsClient struct {
	grpc.ClientStream
}

func (x *aggregatorFetchSystemLogsClient) Recv() (*SystemLogsResponse, error) {
	m := new(SystemLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility
type AggregatorServer interface {
	FetchNetworkLogs(*NetworkLogsRequest, Aggregator_FetchNetworkLogsServer) error
	FetchSystemLogs(*SystemLogsRequest, Aggregator_FetchSystemLogsServer) error
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorServer struct {
}

func (UnimplementedAggregatorServer) FetchNetworkLogs(*NetworkLogsRequest, Aggregator_FetchNetworkLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchNetworkLogs not implemented")
}
func (UnimplementedAggregatorServer) FetchSystemLogs(*SystemLogsRequest, Aggregator_FetchSystemLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchSystemLogs not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_FetchNetworkLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetworkLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggregatorServer).FetchNetworkLogs(m, &aggregatorFetchNetworkLogsServer{stream})
}

type Aggregator_FetchNetworkLogsServer interface {
	Send(*NetworkLogsResponse) error
	grpc.ServerStream
}

type aggregatorFetchNetworkLogsServer struct {
	grpc.ServerStream
}

func (x *aggregatorFetchNetworkLogsServer) Send(m *NetworkLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Aggregator_FetchSystemLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SystemLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggregatorServer).FetchSystemLogs(m, &aggregatorFetchSystemLogsServer{stream})
}

type Aggregator_FetchSystemLogsServer interface {
	Send(*SystemLogsResponse) error
	grpc.ServerStream
}

type aggregatorFetchSystemLogsServer struct {
	grpc.ServerStream
}

func (x *aggregatorFetchSystemLogsServer) Send(m *SystemLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchNetworkLogs",
			Handler:       _Aggregator_FetchNetworkLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchSystemLogs",
			Handler:       _Aggregator_FetchSystemLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/proto/aggregator/aggregator.proto",
}
