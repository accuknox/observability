// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: src/proto/aggregator/aggregator.proto

package aggregator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Filter Network Logs
type NetworkLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Limit the Number of Logs Response
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	//Get Logs Based on Time from current time
	Since string `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	//Get only log count
	Count bool `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	//Get logs based on direction, that's Ingress/Egress
	Direction string `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
	//Get logs based on type, that's L7/L3_L4
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	//Get logs based on verdict, that's Forward/Dropped/Error/Audit
	Verdict []string `protobuf:"bytes,6,rep,name=verdict,proto3" json:"verdict,omitempty"`
	//Get logs based on L4 protocol, that's TCP/UDP/ICMPv4/ICMPv6
	Protocol string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	//Get logs based on l7, thats DNS/Kafka/HTTP
	L7 string `protobuf:"bytes,8,opt,name=l7,proto3" json:"l7,omitempty"`
	//Get logs based on source pod name
	SourcePod []string `protobuf:"bytes,9,rep,name=sourcePod,proto3" json:"sourcePod,omitempty"`
	//Get logs based on source namespace name
	SourceNamespace []string `protobuf:"bytes,10,rep,name=sourceNamespace,proto3" json:"sourceNamespace,omitempty"`
	//Get logs based on destination pod name
	DestinationPod []string `protobuf:"bytes,11,rep,name=destinationPod,proto3" json:"destinationPod,omitempty"`
	//Get logs based on destination namespace name
	DestinationNamespace []string `protobuf:"bytes,12,rep,name=destinationNamespace,proto3" json:"destinationNamespace,omitempty"`
	//Get logs based on node
	Node []string `protobuf:"bytes,13,rep,name=node,proto3" json:"node,omitempty"`
	//Get logs based on source label
	SourceLabel string `protobuf:"bytes,14,opt,name=sourceLabel,proto3" json:"sourceLabel,omitempty"`
	//Get logs based on destination label
	DestinationLabel string `protobuf:"bytes,15,opt,name=destinationLabel,proto3" json:"destinationLabel,omitempty"`
}

func (x *NetworkLogsRequest) Reset() {
	*x = NetworkLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLogsRequest) ProtoMessage() {}

func (x *NetworkLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLogsRequest.ProtoReflect.Descriptor instead.
func (*NetworkLogsRequest) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkLogsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NetworkLogsRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *NetworkLogsRequest) GetCount() bool {
	if x != nil {
		return x.Count
	}
	return false
}

func (x *NetworkLogsRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *NetworkLogsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkLogsRequest) GetVerdict() []string {
	if x != nil {
		return x.Verdict
	}
	return nil
}

func (x *NetworkLogsRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NetworkLogsRequest) GetL7() string {
	if x != nil {
		return x.L7
	}
	return ""
}

func (x *NetworkLogsRequest) GetSourcePod() []string {
	if x != nil {
		return x.SourcePod
	}
	return nil
}

func (x *NetworkLogsRequest) GetSourceNamespace() []string {
	if x != nil {
		return x.SourceNamespace
	}
	return nil
}

func (x *NetworkLogsRequest) GetDestinationPod() []string {
	if x != nil {
		return x.DestinationPod
	}
	return nil
}

func (x *NetworkLogsRequest) GetDestinationNamespace() []string {
	if x != nil {
		return x.DestinationNamespace
	}
	return nil
}

func (x *NetworkLogsRequest) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NetworkLogsRequest) GetSourceLabel() string {
	if x != nil {
		return x.SourceLabel
	}
	return ""
}

func (x *NetworkLogsRequest) GetDestinationLabel() string {
	if x != nil {
		return x.DestinationLabel
	}
	return ""
}

//Filter System Logs
type SystemLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Limit the Number of Logs Response
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	//Get Logs Based on Time from current time
	Since string `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	//Get only log count
	Count bool `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	//Get namespace based logs
	Namespace []string `protobuf:"bytes,4,rep,name=namespace,proto3" json:"namespace,omitempty"`
	//Get logs based on type, that's Container/Host
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	//Get logs based on operation, that's File/Process/Network
	Operation []string `protobuf:"bytes,6,rep,name=operation,proto3" json:"operation,omitempty"`
	//Get logs based on pod name
	Pod []string `protobuf:"bytes,7,rep,name=pod,proto3" json:"pod,omitempty"`
	//Get logs based on host name
	Host []string `protobuf:"bytes,8,rep,name=host,proto3" json:"host,omitempty"`
	//Get logs based on source name
	Source string `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	//Get logs based on resource name
	Resource string `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`
	//Get logs based on container name
	Container []string `protobuf:"bytes,11,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *SystemLogsRequest) Reset() {
	*x = SystemLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogsRequest) ProtoMessage() {}

func (x *SystemLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogsRequest.ProtoReflect.Descriptor instead.
func (*SystemLogsRequest) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{1}
}

func (x *SystemLogsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SystemLogsRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *SystemLogsRequest) GetCount() bool {
	if x != nil {
		return x.Count
	}
	return false
}

func (x *SystemLogsRequest) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *SystemLogsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SystemLogsRequest) GetOperation() []string {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *SystemLogsRequest) GetPod() []string {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *SystemLogsRequest) GetHost() []string {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *SystemLogsRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SystemLogsRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SystemLogsRequest) GetContainer() []string {
	if x != nil {
		return x.Container
	}
	return nil
}

//Response of Network Logs
type NetworkLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs  []*NetworkLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Count int64         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NetworkLogsResponse) Reset() {
	*x = NetworkLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLogsResponse) ProtoMessage() {}

func (x *NetworkLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLogsResponse.ProtoReflect.Descriptor instead.
func (*NetworkLogsResponse) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkLogsResponse) GetLogs() []*NetworkLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *NetworkLogsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

//Response of System Logs
type SystemLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs  []*SystemLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Count int64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SystemLogsResponse) Reset() {
	*x = SystemLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogsResponse) ProtoMessage() {}

func (x *SystemLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogsResponse.ProtoReflect.Descriptor instead.
func (*SystemLogsResponse) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{3}
}

func (x *SystemLogsResponse) GetLogs() []*SystemLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *SystemLogsResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NetworkLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verdict                     string `protobuf:"bytes,1,opt,name=Verdict,proto3" json:"Verdict,omitempty"`
	EthernetSource              string `protobuf:"bytes,2,opt,name=Ethernet_source,json=EthernetSource,proto3" json:"Ethernet_source,omitempty"`
	EthernetDestination         string `protobuf:"bytes,3,opt,name=Ethernet_destination,json=EthernetDestination,proto3" json:"Ethernet_destination,omitempty"`
	IpSource                    string `protobuf:"bytes,4,opt,name=Ip_source,json=IpSource,proto3" json:"Ip_source,omitempty"`
	IpDestination               string `protobuf:"bytes,5,opt,name=Ip_destination,json=IpDestination,proto3" json:"Ip_destination,omitempty"`
	IpVersion                   string `protobuf:"bytes,6,opt,name=Ip_version,json=IpVersion,proto3" json:"Ip_version,omitempty"`
	IpEncrypted                 bool   `protobuf:"varint,7,opt,name=Ip_encrypted,json=IpEncrypted,proto3" json:"Ip_encrypted,omitempty"`
	L4TcpSourcePort             uint32 `protobuf:"varint,8,opt,name=L4_tcp_source_port,json=L4TcpSourcePort,proto3" json:"L4_tcp_source_port,omitempty"`
	L4TcpDestinationPort        uint32 `protobuf:"varint,9,opt,name=L4_tcp_destination_port,json=L4TcpDestinationPort,proto3" json:"L4_tcp_destination_port,omitempty"`
	L4UdpSourcePort             uint32 `protobuf:"varint,10,opt,name=L4_udp_source_port,json=L4UdpSourcePort,proto3" json:"L4_udp_source_port,omitempty"`
	L4UdpDestinationPort        uint32 `protobuf:"varint,11,opt,name=L4_udp_destination_port,json=L4UdpDestinationPort,proto3" json:"L4_udp_destination_port,omitempty"`
	L4Icmpv4Type                uint32 `protobuf:"varint,12,opt,name=L4_icmpv4_type,json=L4Icmpv4Type,proto3" json:"L4_icmpv4_type,omitempty"`
	L4Icmpv4Code                uint32 `protobuf:"varint,13,opt,name=L4_icmpv4_code,json=L4Icmpv4Code,proto3" json:"L4_icmpv4_code,omitempty"`
	L4Icmpv6Type                uint32 `protobuf:"varint,14,opt,name=L4_icmpv6_type,json=L4Icmpv6Type,proto3" json:"L4_icmpv6_type,omitempty"`
	L4Icmpv6Code                uint32 `protobuf:"varint,15,opt,name=L4_icmpv6_code,json=L4Icmpv6Code,proto3" json:"L4_icmpv6_code,omitempty"`
	SourceId                    uint32 `protobuf:"varint,16,opt,name=Source_id,json=SourceId,proto3" json:"Source_id,omitempty"`
	SourceIdentity              uint32 `protobuf:"varint,17,opt,name=Source_identity,json=SourceIdentity,proto3" json:"Source_identity,omitempty"`
	SourceNamespace             string `protobuf:"bytes,18,opt,name=Source_namespace,json=SourceNamespace,proto3" json:"Source_namespace,omitempty"`
	SourceLabels                string `protobuf:"bytes,19,opt,name=Source_labels,json=SourceLabels,proto3" json:"Source_labels,omitempty"`
	SourcePodName               string `protobuf:"bytes,20,opt,name=Source_pod_name,json=SourcePodName,proto3" json:"Source_pod_name,omitempty"`
	DestinationId               uint32 `protobuf:"varint,21,opt,name=Destination_id,json=DestinationId,proto3" json:"Destination_id,omitempty"`
	DestinationIdentity         uint32 `protobuf:"varint,22,opt,name=Destination_identity,json=DestinationIdentity,proto3" json:"Destination_identity,omitempty"`
	DestinationNamespace        string `protobuf:"bytes,23,opt,name=Destination_namespace,json=DestinationNamespace,proto3" json:"Destination_namespace,omitempty"`
	DestinationLabels           string `protobuf:"bytes,24,opt,name=Destination_labels,json=DestinationLabels,proto3" json:"Destination_labels,omitempty"`
	DestinationPodName          string `protobuf:"bytes,25,opt,name=Destination_pod_name,json=DestinationPodName,proto3" json:"Destination_pod_name,omitempty"`
	Type                        string `protobuf:"bytes,26,opt,name=Type,proto3" json:"Type,omitempty"`
	NodeName                    string `protobuf:"bytes,27,opt,name=Node_name,json=NodeName,proto3" json:"Node_name,omitempty"`
	SourceNames                 string `protobuf:"bytes,28,opt,name=Source_names,json=SourceNames,proto3" json:"Source_names,omitempty"`
	DestinationNames            string `protobuf:"bytes,29,opt,name=Destination_names,json=DestinationNames,proto3" json:"Destination_names,omitempty"`
	L7Type                      string `protobuf:"bytes,30,opt,name=L7_type,json=L7Type,proto3" json:"L7_type,omitempty"`
	L7LatencyNs                 uint64 `protobuf:"varint,31,opt,name=L7_latency_ns,json=L7LatencyNs,proto3" json:"L7_latency_ns,omitempty"`
	L7DnsQuery                  string `protobuf:"bytes,32,opt,name=L7_dns_query,json=L7DnsQuery,proto3" json:"L7_dns_query,omitempty"`
	L7DnsIps                    string `protobuf:"bytes,33,opt,name=L7_dns_ips,json=L7DnsIps,proto3" json:"L7_dns_ips,omitempty"`
	L7DnsTtl                    uint32 `protobuf:"varint,34,opt,name=L7_dns_ttl,json=L7DnsTtl,proto3" json:"L7_dns_ttl,omitempty"`
	L7DnsCnames                 string `protobuf:"bytes,35,opt,name=L7_dns_cnames,json=L7DnsCnames,proto3" json:"L7_dns_cnames,omitempty"`
	L7DnsObservationSource      string `protobuf:"bytes,36,opt,name=L7_dns_observation_source,json=L7DnsObservationSource,proto3" json:"L7_dns_observation_source,omitempty"`
	L7DnsRcode                  uint32 `protobuf:"varint,37,opt,name=L7_dns_rcode,json=L7DnsRcode,proto3" json:"L7_dns_rcode,omitempty"`
	L7DnsQtypes                 string `protobuf:"bytes,38,opt,name=L7_dns_qtypes,json=L7DnsQtypes,proto3" json:"L7_dns_qtypes,omitempty"`
	L7DnsRrtypes                string `protobuf:"bytes,39,opt,name=L7_dns_rrtypes,json=L7DnsRrtypes,proto3" json:"L7_dns_rrtypes,omitempty"`
	L7HttpCode                  uint32 `protobuf:"varint,40,opt,name=L7_http_code,json=L7HttpCode,proto3" json:"L7_http_code,omitempty"`
	L7HttpMethod                string `protobuf:"bytes,41,opt,name=L7_http_method,json=L7HttpMethod,proto3" json:"L7_http_method,omitempty"`
	L7HttpUrl                   string `protobuf:"bytes,42,opt,name=L7_http_url,json=L7HttpUrl,proto3" json:"L7_http_url,omitempty"`
	L7HttpProtocol              string `protobuf:"bytes,43,opt,name=L7_http_protocol,json=L7HttpProtocol,proto3" json:"L7_http_protocol,omitempty"`
	L7HttpHeaders               string `protobuf:"bytes,44,opt,name=L7_http_headers,json=L7HttpHeaders,proto3" json:"L7_http_headers,omitempty"`
	L7KafkaErrorCode            int32  `protobuf:"varint,45,opt,name=L7_kafka_error_code,json=L7KafkaErrorCode,proto3" json:"L7_kafka_error_code,omitempty"`
	L7KafkaApiVersion           int32  `protobuf:"varint,46,opt,name=L7_kafka_api_version,json=L7KafkaApiVersion,proto3" json:"L7_kafka_api_version,omitempty"`
	L7KafkaApiKey               string `protobuf:"bytes,47,opt,name=L7_kafka_api_key,json=L7KafkaApiKey,proto3" json:"L7_kafka_api_key,omitempty"`
	L7KafkaCorrelationId        int32  `protobuf:"varint,48,opt,name=L7_kafka_correlation_id,json=L7KafkaCorrelationId,proto3" json:"L7_kafka_correlation_id,omitempty"`
	L7KafkaTopic                string `protobuf:"bytes,49,opt,name=L7_kafka_topic,json=L7KafkaTopic,proto3" json:"L7_kafka_topic,omitempty"`
	EventTypeType               int32  `protobuf:"varint,50,opt,name=Event_type_type,json=EventTypeType,proto3" json:"Event_type_type,omitempty"`
	EventTypeSubType            int32  `protobuf:"varint,51,opt,name=Event_type_sub_type,json=EventTypeSubType,proto3" json:"Event_type_sub_type,omitempty"`
	SourceServiceName           string `protobuf:"bytes,52,opt,name=Source_service_name,json=SourceServiceName,proto3" json:"Source_service_name,omitempty"`
	SourceServiceNamespace      string `protobuf:"bytes,53,opt,name=Source_service_namespace,json=SourceServiceNamespace,proto3" json:"Source_service_namespace,omitempty"`
	DestinationServiceName      string `protobuf:"bytes,54,opt,name=Destination_service_name,json=DestinationServiceName,proto3" json:"Destination_service_name,omitempty"`
	DestinationServiceNamespace string `protobuf:"bytes,55,opt,name=Destination_service_namespace,json=DestinationServiceNamespace,proto3" json:"Destination_service_namespace,omitempty"`
	TrafficDirection            string `protobuf:"bytes,56,opt,name=Traffic_direction,json=TrafficDirection,proto3" json:"Traffic_direction,omitempty"`
	PolicyMatchType             uint32 `protobuf:"varint,57,opt,name=Policy_match_type,json=PolicyMatchType,proto3" json:"Policy_match_type,omitempty"`
	TraceObservationPoint       string `protobuf:"bytes,58,opt,name=Trace_observation_point,json=TraceObservationPoint,proto3" json:"Trace_observation_point,omitempty"`
	DropReasonDesc              string `protobuf:"bytes,59,opt,name=Drop_reason_desc,json=DropReasonDesc,proto3" json:"Drop_reason_desc,omitempty"`
	IsReply                     bool   `protobuf:"varint,60,opt,name=Is_reply,json=IsReply,proto3" json:"Is_reply,omitempty"`
	DebugCapturePoint           string `protobuf:"bytes,61,opt,name=Debug_capture_point,json=DebugCapturePoint,proto3" json:"Debug_capture_point,omitempty"`
	InterfaceIndex              uint32 `protobuf:"varint,62,opt,name=Interface_index,json=InterfaceIndex,proto3" json:"Interface_index,omitempty"`
	InterfaceName               string `protobuf:"bytes,63,opt,name=Interface_name,json=InterfaceName,proto3" json:"Interface_name,omitempty"`
	ProxyPort                   uint32 `protobuf:"varint,64,opt,name=Proxy_port,json=ProxyPort,proto3" json:"Proxy_port,omitempty"`
	StartTime                   int64  `protobuf:"varint,65,opt,name=Start_time,json=StartTime,proto3" json:"Start_time,omitempty"`
	UpdatedTime                 int64  `protobuf:"varint,66,opt,name=Updated_time,json=UpdatedTime,proto3" json:"Updated_time,omitempty"`
	Total                       int64  `protobuf:"varint,67,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *NetworkLog) Reset() {
	*x = NetworkLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLog) ProtoMessage() {}

func (x *NetworkLog) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLog.ProtoReflect.Descriptor instead.
func (*NetworkLog) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkLog) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *NetworkLog) GetEthernetSource() string {
	if x != nil {
		return x.EthernetSource
	}
	return ""
}

func (x *NetworkLog) GetEthernetDestination() string {
	if x != nil {
		return x.EthernetDestination
	}
	return ""
}

func (x *NetworkLog) GetIpSource() string {
	if x != nil {
		return x.IpSource
	}
	return ""
}

func (x *NetworkLog) GetIpDestination() string {
	if x != nil {
		return x.IpDestination
	}
	return ""
}

func (x *NetworkLog) GetIpVersion() string {
	if x != nil {
		return x.IpVersion
	}
	return ""
}

func (x *NetworkLog) GetIpEncrypted() bool {
	if x != nil {
		return x.IpEncrypted
	}
	return false
}

func (x *NetworkLog) GetL4TcpSourcePort() uint32 {
	if x != nil {
		return x.L4TcpSourcePort
	}
	return 0
}

func (x *NetworkLog) GetL4TcpDestinationPort() uint32 {
	if x != nil {
		return x.L4TcpDestinationPort
	}
	return 0
}

func (x *NetworkLog) GetL4UdpSourcePort() uint32 {
	if x != nil {
		return x.L4UdpSourcePort
	}
	return 0
}

func (x *NetworkLog) GetL4UdpDestinationPort() uint32 {
	if x != nil {
		return x.L4UdpDestinationPort
	}
	return 0
}

func (x *NetworkLog) GetL4Icmpv4Type() uint32 {
	if x != nil {
		return x.L4Icmpv4Type
	}
	return 0
}

func (x *NetworkLog) GetL4Icmpv4Code() uint32 {
	if x != nil {
		return x.L4Icmpv4Code
	}
	return 0
}

func (x *NetworkLog) GetL4Icmpv6Type() uint32 {
	if x != nil {
		return x.L4Icmpv6Type
	}
	return 0
}

func (x *NetworkLog) GetL4Icmpv6Code() uint32 {
	if x != nil {
		return x.L4Icmpv6Code
	}
	return 0
}

func (x *NetworkLog) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *NetworkLog) GetSourceIdentity() uint32 {
	if x != nil {
		return x.SourceIdentity
	}
	return 0
}

func (x *NetworkLog) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *NetworkLog) GetSourceLabels() string {
	if x != nil {
		return x.SourceLabels
	}
	return ""
}

func (x *NetworkLog) GetSourcePodName() string {
	if x != nil {
		return x.SourcePodName
	}
	return ""
}

func (x *NetworkLog) GetDestinationId() uint32 {
	if x != nil {
		return x.DestinationId
	}
	return 0
}

func (x *NetworkLog) GetDestinationIdentity() uint32 {
	if x != nil {
		return x.DestinationIdentity
	}
	return 0
}

func (x *NetworkLog) GetDestinationNamespace() string {
	if x != nil {
		return x.DestinationNamespace
	}
	return ""
}

func (x *NetworkLog) GetDestinationLabels() string {
	if x != nil {
		return x.DestinationLabels
	}
	return ""
}

func (x *NetworkLog) GetDestinationPodName() string {
	if x != nil {
		return x.DestinationPodName
	}
	return ""
}

func (x *NetworkLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkLog) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NetworkLog) GetSourceNames() string {
	if x != nil {
		return x.SourceNames
	}
	return ""
}

func (x *NetworkLog) GetDestinationNames() string {
	if x != nil {
		return x.DestinationNames
	}
	return ""
}

func (x *NetworkLog) GetL7Type() string {
	if x != nil {
		return x.L7Type
	}
	return ""
}

func (x *NetworkLog) GetL7LatencyNs() uint64 {
	if x != nil {
		return x.L7LatencyNs
	}
	return 0
}

func (x *NetworkLog) GetL7DnsQuery() string {
	if x != nil {
		return x.L7DnsQuery
	}
	return ""
}

func (x *NetworkLog) GetL7DnsIps() string {
	if x != nil {
		return x.L7DnsIps
	}
	return ""
}

func (x *NetworkLog) GetL7DnsTtl() uint32 {
	if x != nil {
		return x.L7DnsTtl
	}
	return 0
}

func (x *NetworkLog) GetL7DnsCnames() string {
	if x != nil {
		return x.L7DnsCnames
	}
	return ""
}

func (x *NetworkLog) GetL7DnsObservationSource() string {
	if x != nil {
		return x.L7DnsObservationSource
	}
	return ""
}

func (x *NetworkLog) GetL7DnsRcode() uint32 {
	if x != nil {
		return x.L7DnsRcode
	}
	return 0
}

func (x *NetworkLog) GetL7DnsQtypes() string {
	if x != nil {
		return x.L7DnsQtypes
	}
	return ""
}

func (x *NetworkLog) GetL7DnsRrtypes() string {
	if x != nil {
		return x.L7DnsRrtypes
	}
	return ""
}

func (x *NetworkLog) GetL7HttpCode() uint32 {
	if x != nil {
		return x.L7HttpCode
	}
	return 0
}

func (x *NetworkLog) GetL7HttpMethod() string {
	if x != nil {
		return x.L7HttpMethod
	}
	return ""
}

func (x *NetworkLog) GetL7HttpUrl() string {
	if x != nil {
		return x.L7HttpUrl
	}
	return ""
}

func (x *NetworkLog) GetL7HttpProtocol() string {
	if x != nil {
		return x.L7HttpProtocol
	}
	return ""
}

func (x *NetworkLog) GetL7HttpHeaders() string {
	if x != nil {
		return x.L7HttpHeaders
	}
	return ""
}

func (x *NetworkLog) GetL7KafkaErrorCode() int32 {
	if x != nil {
		return x.L7KafkaErrorCode
	}
	return 0
}

func (x *NetworkLog) GetL7KafkaApiVersion() int32 {
	if x != nil {
		return x.L7KafkaApiVersion
	}
	return 0
}

func (x *NetworkLog) GetL7KafkaApiKey() string {
	if x != nil {
		return x.L7KafkaApiKey
	}
	return ""
}

func (x *NetworkLog) GetL7KafkaCorrelationId() int32 {
	if x != nil {
		return x.L7KafkaCorrelationId
	}
	return 0
}

func (x *NetworkLog) GetL7KafkaTopic() string {
	if x != nil {
		return x.L7KafkaTopic
	}
	return ""
}

func (x *NetworkLog) GetEventTypeType() int32 {
	if x != nil {
		return x.EventTypeType
	}
	return 0
}

func (x *NetworkLog) GetEventTypeSubType() int32 {
	if x != nil {
		return x.EventTypeSubType
	}
	return 0
}

func (x *NetworkLog) GetSourceServiceName() string {
	if x != nil {
		return x.SourceServiceName
	}
	return ""
}

func (x *NetworkLog) GetSourceServiceNamespace() string {
	if x != nil {
		return x.SourceServiceNamespace
	}
	return ""
}

func (x *NetworkLog) GetDestinationServiceName() string {
	if x != nil {
		return x.DestinationServiceName
	}
	return ""
}

func (x *NetworkLog) GetDestinationServiceNamespace() string {
	if x != nil {
		return x.DestinationServiceNamespace
	}
	return ""
}

func (x *NetworkLog) GetTrafficDirection() string {
	if x != nil {
		return x.TrafficDirection
	}
	return ""
}

func (x *NetworkLog) GetPolicyMatchType() uint32 {
	if x != nil {
		return x.PolicyMatchType
	}
	return 0
}

func (x *NetworkLog) GetTraceObservationPoint() string {
	if x != nil {
		return x.TraceObservationPoint
	}
	return ""
}

func (x *NetworkLog) GetDropReasonDesc() string {
	if x != nil {
		return x.DropReasonDesc
	}
	return ""
}

func (x *NetworkLog) GetIsReply() bool {
	if x != nil {
		return x.IsReply
	}
	return false
}

func (x *NetworkLog) GetDebugCapturePoint() string {
	if x != nil {
		return x.DebugCapturePoint
	}
	return ""
}

func (x *NetworkLog) GetInterfaceIndex() uint32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *NetworkLog) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NetworkLog) GetProxyPort() uint32 {
	if x != nil {
		return x.ProxyPort
	}
	return 0
}

func (x *NetworkLog) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *NetworkLog) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *NetworkLog) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SystemLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName   string `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	HostName      string `protobuf:"bytes,2,opt,name=hostName,proto3" json:"hostName,omitempty"`
	Namespace     string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PodName       string `protobuf:"bytes,4,opt,name=podName,proto3" json:"podName,omitempty"`
	ContainerID   string `protobuf:"bytes,5,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ContainerName string `protobuf:"bytes,6,opt,name=containerName,proto3" json:"containerName,omitempty"`
	Uid           int32  `protobuf:"varint,7,opt,name=uid,proto3" json:"uid,omitempty"`
	Type          string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Source        string `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	Operation     string `protobuf:"bytes,10,opt,name=operation,proto3" json:"operation,omitempty"`
	Resource      string `protobuf:"bytes,11,opt,name=resource,proto3" json:"resource,omitempty"`
	Data          string `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`
	StartTime     int64  `protobuf:"varint,13,opt,name=startTime,proto3" json:"startTime,omitempty"`
	UpdateTime    int64  `protobuf:"varint,14,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Result        string `protobuf:"bytes,15,opt,name=result,proto3" json:"result,omitempty"`
	Total         int64  `protobuf:"varint,16,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SystemLog) Reset() {
	*x = SystemLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLog) ProtoMessage() {}

func (x *SystemLog) ProtoReflect() protoreflect.Message {
	mi := &file_src_proto_aggregator_aggregator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLog.ProtoReflect.Descriptor instead.
func (*SystemLog) Descriptor() ([]byte, []int) {
	return file_src_proto_aggregator_aggregator_proto_rawDescGZIP(), []int{5}
}

func (x *SystemLog) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SystemLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *SystemLog) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SystemLog) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *SystemLog) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *SystemLog) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *SystemLog) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SystemLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SystemLog) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SystemLog) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *SystemLog) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SystemLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SystemLog) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SystemLog) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SystemLog) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *SystemLog) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_src_proto_aggregator_aggregator_proto protoreflect.FileDescriptor

var file_src_proto_aggregator_aggregator_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xd4, 0x03, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6c, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x13, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x15, 0x0a, 0x0a, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x49, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x49, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x49, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x49, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x70, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x4c, 0x34, 0x5f, 0x74, 0x63, 0x70, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x4c, 0x34, 0x54, 0x63, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x4c, 0x34, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x34, 0x54, 0x63, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x4c, 0x34, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4c, 0x34, 0x55, 0x64, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x4c, 0x34, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x34, 0x55, 0x64, 0x70, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x4c, 0x34, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x34, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x34, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x4c, 0x34, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x34,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x34, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x4c, 0x34, 0x5f,
	0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4c, 0x34, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x4c, 0x34, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x34, 0x49, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a,
	0x15, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x4c, 0x37, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x37, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x4c, 0x37, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4c, 0x37, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x70,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x49, 0x70,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x54, 0x74, 0x6c, 0x12,
	0x22, 0x0a, 0x0d, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x43, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x52, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x37, 0x44, 0x6e, 0x73, 0x51, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x4c, 0x37, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x37,
	0x44, 0x6e, 0x73, 0x52, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x4c, 0x37,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x4c, 0x37, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x4c, 0x37, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x37, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x4c, 0x37, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x37, 0x48, 0x74, 0x74, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x4c, 0x37, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x37,
	0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x4c, 0x37, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x37, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x4c, 0x37, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x4c, 0x37, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x4c, 0x37, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x4c, 0x37, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x4c, 0x37, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4c, 0x37, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x17, 0x4c, 0x37, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x4c, 0x37, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x4c, 0x37, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x37,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x44, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x49, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc1, 0x03, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xb3, 0x01, 0x0a, 0x0a, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x1d, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x63, 0x63, 0x75, 0x6b, 0x6e, 0x6f, 0x78, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_proto_aggregator_aggregator_proto_rawDescOnce sync.Once
	file_src_proto_aggregator_aggregator_proto_rawDescData = file_src_proto_aggregator_aggregator_proto_rawDesc
)

func file_src_proto_aggregator_aggregator_proto_rawDescGZIP() []byte {
	file_src_proto_aggregator_aggregator_proto_rawDescOnce.Do(func() {
		file_src_proto_aggregator_aggregator_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_proto_aggregator_aggregator_proto_rawDescData)
	})
	return file_src_proto_aggregator_aggregator_proto_rawDescData
}

var file_src_proto_aggregator_aggregator_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_src_proto_aggregator_aggregator_proto_goTypes = []interface{}{
	(*NetworkLogsRequest)(nil),  // 0: aggregator.NetworkLogsRequest
	(*SystemLogsRequest)(nil),   // 1: aggregator.SystemLogsRequest
	(*NetworkLogsResponse)(nil), // 2: aggregator.NetworkLogsResponse
	(*SystemLogsResponse)(nil),  // 3: aggregator.SystemLogsResponse
	(*NetworkLog)(nil),          // 4: aggregator.NetworkLog
	(*SystemLog)(nil),           // 5: aggregator.SystemLog
}
var file_src_proto_aggregator_aggregator_proto_depIdxs = []int32{
	4, // 0: aggregator.NetworkLogsResponse.logs:type_name -> aggregator.NetworkLog
	5, // 1: aggregator.SystemLogsResponse.logs:type_name -> aggregator.SystemLog
	0, // 2: aggregator.Aggregator.FetchNetworkLogs:input_type -> aggregator.NetworkLogsRequest
	1, // 3: aggregator.Aggregator.FetchSystemLogs:input_type -> aggregator.SystemLogsRequest
	2, // 4: aggregator.Aggregator.FetchNetworkLogs:output_type -> aggregator.NetworkLogsResponse
	3, // 5: aggregator.Aggregator.FetchSystemLogs:output_type -> aggregator.SystemLogsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_src_proto_aggregator_aggregator_proto_init() }
func file_src_proto_aggregator_aggregator_proto_init() {
	if File_src_proto_aggregator_aggregator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_proto_aggregator_aggregator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_proto_aggregator_aggregator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_proto_aggregator_aggregator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_proto_aggregator_aggregator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_proto_aggregator_aggregator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_proto_aggregator_aggregator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_proto_aggregator_aggregator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_proto_aggregator_aggregator_proto_goTypes,
		DependencyIndexes: file_src_proto_aggregator_aggregator_proto_depIdxs,
		MessageInfos:      file_src_proto_aggregator_aggregator_proto_msgTypes,
	}.Build()
	File_src_proto_aggregator_aggregator_proto = out.File
	file_src_proto_aggregator_aggregator_proto_rawDesc = nil
	file_src_proto_aggregator_aggregator_proto_goTypes = nil
	file_src_proto_aggregator_aggregator_proto_depIdxs = nil
}
