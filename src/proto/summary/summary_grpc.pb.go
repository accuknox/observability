// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package summary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SummaryClient is the client API for Summary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryClient interface {
	FetchLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Summary_FetchLogsClient, error)
}

type summaryClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryClient(cc grpc.ClientConnInterface) SummaryClient {
	return &summaryClient{cc}
}

func (c *summaryClient) FetchLogs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Summary_FetchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Summary_ServiceDesc.Streams[0], "/summary.Summary/FetchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &summaryFetchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Summary_FetchLogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type summaryFetchLogsClient struct {
	grpc.ClientStream
}

func (x *summaryFetchLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SummaryServer is the server API for Summary service.
// All implementations must embed UnimplementedSummaryServer
// for forward compatibility
type SummaryServer interface {
	FetchLogs(*LogsRequest, Summary_FetchLogsServer) error
	mustEmbedUnimplementedSummaryServer()
}

// UnimplementedSummaryServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServer struct {
}

func (UnimplementedSummaryServer) FetchLogs(*LogsRequest, Summary_FetchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchLogs not implemented")
}
func (UnimplementedSummaryServer) mustEmbedUnimplementedSummaryServer() {}

// UnsafeSummaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServer will
// result in compilation errors.
type UnsafeSummaryServer interface {
	mustEmbedUnimplementedSummaryServer()
}

func RegisterSummaryServer(s grpc.ServiceRegistrar, srv SummaryServer) {
	s.RegisterService(&Summary_ServiceDesc, srv)
}

func _Summary_FetchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServer).FetchLogs(m, &summaryFetchLogsServer{stream})
}

type Summary_FetchLogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type summaryFetchLogsServer struct {
	grpc.ServerStream
}

func (x *summaryFetchLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Summary_ServiceDesc is the grpc.ServiceDesc for Summary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Summary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "summary.Summary",
	HandlerType: (*SummaryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchLogs",
			Handler:       _Summary_FetchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/proto/summary/summary.proto",
}
